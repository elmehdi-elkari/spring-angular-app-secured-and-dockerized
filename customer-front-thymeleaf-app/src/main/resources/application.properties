spring.application.name=customer-app
server.port=1111
spring.datasource.url=jdbc:h2:mem:customers-db
spring.h2.console.enabled=true


#par d�feaut il existe une protection de spring par s�curite avec login et mote passe
#pour p�rsonaliser notre configuration.
# enregistrer un provider Oauth2
# spring.security.oauth2.client.registration(google github facebook octa)
spring.security.oauth2.client.registration.google.clientId=427081257987-qmh5im4tra4o2ndje3md6antcbpr5r93.apps.googleusercontent.com
#427081257987-17e3kira6ig0ip6fhmd4lnkv5vetaoov.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
#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
spring.security.oauth2.client.provider.google.user-name-attribute=email

spring.security.oauth2.client.registration.github.clientId=e5e80e37b1f265aede88
spring.security.oauth2.client.registration.github.client-secret=159ef5c188ef496ed535885e6291fe56b551ae98
spring.security.oauth2.client.provider.github.user-name-attribute=login

spring.security.oauth2.client.registration.keycloak.client-name=keycloak
spring.security.oauth2.client.registration.keycloak.client-id=sdia-customers-app
spring.security.oauth2.client.registration.keycloak.client-secret=7DQxAzgzx4ddBzI508ZohO7JUFK3F89W
#scope -> les infos contient a notre jwt
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,offline_access
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri=${KEYCLOAK_REDIRECT_URI:http://localhost:1111/login/oauth2/code/sdia-customers-app}
spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/sdia-realm}
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

spring.security.oauth2.client.provider.keycloak.authorization-uri=${KEYCLOAK_AUTH:http://localhost:8080/realms/sdia-realm/protocol/openid-connect/auth}
spring.security.oauth2.client.provider.keycloak.token-uri=${KEYCLOAK_AUTH_TOKEN:http://localhost:8080/realms/sdia-realm/protocol/openid-connect/token}
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${JWT_JWK_SET_URI:http://localhost:8080/realms/sdia-realm/protocol/openid-connect/certs}
inventory.service.base.uri=${INVENTORY_SERVICE_BASE_URI:http://localhost:2222}